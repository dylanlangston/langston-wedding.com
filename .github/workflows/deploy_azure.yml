name: Deploy Bicep to Azure

on:
  workflow_call:

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    name: "Deploy Bicep ðŸ’ª"
    runs-on: ubuntu-latest
    environment:
      name: production
    outputs:
      staticWebsiteUrl: ${{ steps.get_outputs.outputs.staticWebsiteUrl }}
      functionAppUrl: ${{ steps.get_outputs.outputs.functionAppUrl }}
      resourceSuffix: ${{ steps.get_outputs.outputs.resourceSuffix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Bicep Template
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az stack group create \
              --name langston-wedding.com \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --template-file ./Infrastructure/main.bicep \
              --action-on-unmanage deleteResources \
              --deny-settings-mode None

      - name: Get Deployment Outputs
        id: get_outputs
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            outputs=$(az stack group show \
              --name langston-wedding.com \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --query "outputs" -o json)

            staticWebsiteUrl=$(echo $outputs | jq -r '.staticWebsiteUrl.value')
            functionAppUrl=$(echo $outputs | jq -r '.functionAppUrl.value')
            resourceSuffix=$(echo $outputs | jq -r '.resourceSuffix.value')
            
            echo "staticWebsiteUrl=$staticWebsiteUrl" >> "$GITHUB_OUTPUT"
            echo "functionAppUrl=$functionAppUrl" >> "$GITHUB_OUTPUT"
            echo "resourceSuffix=$resourceSuffix" >> "$GITHUB_OUTPUT"

  deploy-site:
    name: Deploy Site
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - name: Download site artifact
        uses: actions/download-artifact@main
        with:
          name: site-artifact
          path: dist

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Storage
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob service-properties update \
              --account-name st${{ needs.deploy-infrastructure.outputs.resourceSuffix }} \
              --static-website \
              --index-document Index.html \
              --404-document 404.html

            az storage blob upload-batch \
              --account-name st${{ needs.deploy-infrastructure.outputs.resourceSuffix }} \
              --source ./dist \
              --destination '$web'
              --overwrite

      - name: Create/Update Cloudflare DNS Record
        run: |
          DOMAIN=$(echo ${{ needs.deploy-infrastructure.outputs.staticWebsiteUrl }} | awk -F[/:] '{print $4}')
      
          RESPONSE=$(curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "{
              \"type\": \"CNAME\",
              \"name\": \"${{ secrets.CUSTOM_DOMAIN }}\",
              \"content\": \"$DOMAIN\",
              \"ttl\": 3600,
              \"proxied\": false
            }")

          DNS_RECORD_ID=$(echo $RESPONSE | jq -r '.result.id')

          echo "DNS_RECORD_ID=$DNS_RECORD_ID" >> $GITHUB_ENV

          sleep 30

      - name: Add Domain to Azure Static Website
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az storage account update \
              --name st${{ needs.deploy-infrastructure.outputs.resourceSuffix }} \
              --custom-domain ${{ secrets.CUSTOM_DOMAIN }} \
              --use-subdomain false

      - name: Enable Cloudflare Proxy
        run: |
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ env.DNS_RECORD_ID }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "{
              \"proxied\": true
            }"

  deploy-function:
    name: Deploy Function
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - name: Download site artifact
        uses: actions/download-artifact@main
        with:
          name: function-artifact
          path: function

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy .NET Function App
        run: |
          az functionapp deployment source config-zip \
            --name func${{ needs.deploy-infrastructure.outputs.resourceSuffix }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --src function.zip